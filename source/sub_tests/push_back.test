TEST_CASE("add elements with push_back", "[list_insertion]") {
  List<int> list{};


  // actual tests
  // ------------
  list.push_back(9); 
  {
    // front to back list content should be: 9
    auto first_pointer = get_first_pointer(list);
    auto last_pointer  = get_last_pointer(list); 
   
    SECTION("first_ and last_ should not be nullptrs anymore") {
      REQUIRE(nullptr != first_pointer);
      REQUIRE(nullptr != last_pointer);
    }

    SECTION("the links between nodes are set correctly") {
      REQUIRE(nullptr == first_pointer->prev);
      REQUIRE(nullptr == first_pointer->next);
      REQUIRE(first_pointer == last_pointer);
    }
    
    SECTION("the only element in the list should be  9") {
      REQUIRE(9 == first_pointer->value);
    }

    SECTION("the list has size 1 and is not empty") {
      REQUIRE( 1 == get_size(list) );
      REQUIRE( false == list.empty() );
    }
  }

  list.push_back(1);
  {
    // 
    auto first_pointer = get_first_pointer(list);
    auto last_pointer  = get_last_pointer(list); 
   
    SECTION("first_ and last_ should not be nullptrs anymore") {
      REQUIRE(nullptr != first_pointer);
      REQUIRE(nullptr != last_pointer);
    }

    SECTION("the links between nodes are set correctly") {
      REQUIRE(nullptr == first_pointer->prev);
      REQUIRE(nullptr == last_pointer->next);
      REQUIRE(first_pointer->next == last_pointer);
      REQUIRE(first_pointer       == last_pointer->prev);
    }

    SECTION("front to back list content should be: 9 1") {
      REQUIRE( 9 == first_pointer->value );
      REQUIRE( 1 == last_pointer->value );
    }

    SECTION("the list has size 2 and is not empty") {
      REQUIRE( 2 == get_size(list));
      REQUIRE( false == list.empty());
    }
  }

  list.push_back(-7);
  {
    //front to back list content should be: 9 1 -7
    auto first_pointer           = get_first_pointer(list);
    auto last_pointer            = get_last_pointer(list);
    auto forward_middle_pointer  = first_pointer->next;
    auto backward_middle_pointer = last_pointer->prev;

    SECTION("first_ and last_ should not be nullptrs anymore") {
      REQUIRE(nullptr != first_pointer);
      REQUIRE(nullptr != last_pointer);
    }

    SECTION("the links between nodes are set correctly") {
      REQUIRE(nullptr == first_pointer->prev);
      REQUIRE(nullptr == last_pointer->next);
      REQUIRE(forward_middle_pointer       == backward_middle_pointer);
      REQUIRE(forward_middle_pointer->next == last_pointer);
      REQUIRE(first_pointer                == backward_middle_pointer->prev);
    }

    SECTION("front to back list content should be: 9 1") {
      REQUIRE( 9 == first_pointer->value);
      REQUIRE( 1 == forward_middle_pointer->value);
      REQUIRE(-7 == last_pointer->value);
    }

    SECTION("the list has size 3 and is not empty") {
      REQUIRE( 3 == get_size(list)); 
      REQUIRE( false == list.empty() );
    }
  }
}